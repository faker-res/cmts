<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kthcorp.cmts.mapper.CcubeMapper">

    <select id="get50ActiveCcubeContents" resultType="com.kthcorp.cmts.model.CcubeContent">
        /* get50ActiveCcubeContents */
        select
        MASTER_CONTENT_ID,
        CONTENT_ID,
        PURITY_TITLE,
        CONTENT_TITLE,
        ENG_TITLE,
        DIRECTOR,
        YEAR,
        ACTORS_DISPLAY,
        POSTER_URL,
        COUNTRY_OF_ORIGIN,
        SAD_CTGRY_ID,
        SAD_CTGRY_NM,
        TITLE_BRIEF,
        DOMESTIC_RELEASE_DATE,
        KT_RATING,
        RUNNING_TIME,
        DETAIL_GENRE_DISPLAY_CD,
        DETAIL_GENRE_DISPLAY_NM,
        KMRB_ID,
        KMRB_TITLE_NM,
        KMRB_YEAR,
        KMRB_DOMESTIC_RELEASE_DATE,
        KMRB_COUNTRY_OF_ORIGIN,
        KMRB_DIRECTOR,
        KMRB_DIRECTOR_ENG,
        KMRB_ACTORS_DISPLAY,
        KMRB_ACTORS_DISPLAY_ENG,
        REGDATE,
        STAT
        from ccube_contents
        where stat = 'Y'
        order by regdate ASC
        limit 50
    </select>

    <update id="uptCcubeContentStat" parameterType="com.kthcorp.cmts.model.CcubeContent">
        /* uptCcubeContentStat */
        update ccube_contents set stat = #{stat}
        where CONTENT_ID = #{content_id}
    </update>

    <select id="getCcubeContentByCid" parameterType="com.kthcorp.cmts.model.CcubeContent" resultType="com.kthcorp.cmts.model.CcubeContent">
        /* getCcubeContentByCid */
        select
        MASTER_CONTENT_ID,
        CONTENT_ID,
        PURITY_TITLE,
        CONTENT_TITLE,
        ENG_TITLE,
        DIRECTOR,
        YEAR,
        ACTORS_DISPLAY,
        POSTER_URL,
        COUNTRY_OF_ORIGIN,
        SAD_CTGRY_ID,
        SAD_CTGRY_NM,
        TITLE_BRIEF,
        DOMESTIC_RELEASE_DATE,
        KT_RATING,
        RUNNING_TIME,
        DETAIL_GENRE_DISPLAY_CD,
        DETAIL_GENRE_DISPLAY_NM,
        KMRB_ID,
        KMRB_TITLE_NM,
        KMRB_YEAR,
        KMRB_DOMESTIC_RELEASE_DATE,
        KMRB_COUNTRY_OF_ORIGIN,
        KMRB_DIRECTOR,
        KMRB_DIRECTOR_ENG,
        KMRB_ACTORS_DISPLAY,
        KMRB_ACTORS_DISPLAY_ENG,
        REGDATE,
        STAT
        from ccube_contents
        where CONTENT_ID = #{content_id}
        order by regdate DESC
        limit 1
    </select>

    <select id="get50ActiveCcubeSeries" resultType="com.kthcorp.cmts.model.CcubeSeries">
        /* get50ActiveCcubeSeries */
        select
        SERIES_ID,
        SERIES_NM,
        PURITY_TITLE,
        ENG_TITLE,
        DIRECTOR,
        YEAR,
        ACTORS_DISPLAY,
        POSTER_URL,
        COUNTRY_OF_ORIGIN,
        SAD_CTGRY_ID,
        SAD_CTGRY_NM,
        KT_RATING,
        DETAIL_GENRE_DISPLAY_CD,
        DETAIL_GENRE_DISPLAY_NM,
        REGDATE,
        STAT
        from ccube_series
        where STAT = 'Y'
        order by regdate ASC
        limit 50
    </select>

    <update id="uptCcubeSeriesStat" parameterType="com.kthcorp.cmts.model.CcubeSeries">
        /* uptCcubeSeriesStat */
        update ccube_series set stat = #{stat}
        where SERIES_ID = #{series_id}
    </update>

    <select id="getCcubeSeriesById" parameterType="com.kthcorp.cmts.model.CcubeSeries" resultType="com.kthcorp.cmts.model.CcubeSeries">
        /* getCcubeSeriesById */
        select
        SERIES_ID,
        SERIES_NM,
        PURITY_TITLE,
        ENG_TITLE,
        DIRECTOR,
        YEAR,
        ACTORS_DISPLAY,
        POSTER_URL,
        COUNTRY_OF_ORIGIN,
        SAD_CTGRY_ID,
        SAD_CTGRY_NM,
        KT_RATING,
        DETAIL_GENRE_DISPLAY_CD,
        DETAIL_GENRE_DISPLAY_NM,
        REGDATE,
        STAT
        from ccube_series
        where SERIES_ID = #{series_id}
        order by regdate DESC
        limit 1
    </select>

    <select id="getCcubeItemIdx" parameterType="com.kthcorp.cmts.model.CcubeKeys" resultType="java.lang.Integer">
        /* getCcubeItemIdx  */
        select a.itemidx from
        (
            (
                select ck.itemidx from ccube_keys ck
                inner join items it on it.idx = ck.itemidx
                where
                <if test='content_id != null and content_id != ""'>
                    ck.CONTENT_ID = #{content_id}
                </if>
                <if test='series_id != null and series_id != ""'>
                    ck.SERIES_ID = #{series_id}
                </if>
                order by ck.regdate ASC limit 1
            )
            union
            ( select 0 as itemidx )
        ) a
        limit 1
    </select>

    <select id="getCcubeItemIdx2" parameterType="com.kthcorp.cmts.model.CcubeKeys" resultType="java.lang.Integer">
        /* getCcubeItemIdx2  */
        select a.itemidx from
        (
        (
        select ck.itemidx from ccube_keys ck
        inner join items it on it.idx = ck.itemidx
        where
        <if test='purity_title != null and purity_title != ""'>
            ck.PURITY_TITLE = #{purity_title}
        </if>
        <if test='year != null and year != ""'>
            and ck.YEAR = #{year}
        </if>
        <if test='director != null and director != ""'>
            and ck.DIRECTOR = #{director}
        </if>
        order by ck.regdate ASC limit 1
        )
        union
        ( select 0 as itemidx )
        ) a
        limit 1
    </select>

    <select id="getCcubeKeysIdx" parameterType="com.kthcorp.cmts.model.CcubeKeys" resultType="java.lang.Integer">
        /* getCcubeKeysIdx  */
        select CIDX from ccube_keys
        where
        PURITY_TITLE = #{purity_title}
        <if test='content_id != null and content_id != ""'>
            OR CONTENT_ID = #{content_id}
        </if>
        <if test='kmrb_id != null and kmrb_id != ""'>
            OR KMRB_ID = #{kmrb_id}
        </if>
        <if test='master_content_id != null and master_content_id != ""'>
            OR MASTER_CONTENT_ID = #{master_content_id}
        </if>
        <if test='series_id != null and series_id != ""'>
            OR SERIES_ID = #{series_id}
        </if>
        order by regdate DESC
        limit 1
    </select>

    <insert id="insCcubeKeys" parameterType="com.kthcorp.cmts.model.CcubeKeys" useGeneratedKeys="true" keyProperty="cidx">
        /* insCcubeKey */
        insert into ccube_keys (master_content_id, content_id, series_id, purity_title, kmrb_id, itemidx, director, year, regdate)
        values (#{master_content_id}, #{content_id}, #{series_id}, #{purity_title}, #{kmrb_id}, #{itemidx}, #{director}, #{year}, now());

    </insert>

    <select id="getCcubeKeys" parameterType="java.lang.Integer" resultType="com.kthcorp.cmts.model.CcubeKeys">
        /* getCcubeKeys  */
        select cidx, master_content_id, content_id, series_id, purity_title, kmrb_id, itemidx, regdate
        from ccube_keys
        where itemidx = #{idx}
        order by regdate desc
        limit 1
    </select>

    <insert id="insCcubeContent" parameterType="com.kthcorp.cmts.model.CcubeContent">
        /* insCcubeContent */
        insert into ccube_contents (
            MASTER_CONTENT_ID, CONTENT_ID, PURITY_TITLE, CONTENT_TITLE, ENG_TITLE, DIRECTOR, YEAR,
            ACTORS_DISPLAY, POSTER_URL, COUNTRY_OF_ORIGIN, SAD_CTGRY_ID, SAD_CTGRY_NM, TITLE_BRIEF, DOMESTIC_RELEASE_DATE,
            KT_RATING, RUNNING_TIME, DETAIL_GENRE_DISPLAY_CD, DETAIL_GENRE_DISPLAY_NM, KMRB_ID, KMRB_TITLE_NM, KMRB_YEAR,
            KMRB_DOMESTIC_RELEASE_DATE, KMRB_COUNTRY_OF_ORIGIN, KMRB_DIRECTOR, KMRB_DIRECTOR_ENG, KMRB_ACTORS_DISPLAY, KMRB_ACTORS_DISPLAY_ENG,
            REGDATE,
            STAT,
            SUMMARY_LONG,
            SUMMARY_MEDIUM
            ) values (
            #{master_content_id}, #{content_id}, #{purity_title}, #{content_title}, #{eng_title}, #{director}, #{year},
            #{actors_display}, #{poster_url}, #{country_of_origin}, #{sad_ctgry_id}, #{sad_ctgry_nm}, #{title_brief}, #{domestic_release_date},
            #{kt_rating}, #{running_time}, #{detail_genre_display_cd}, #{detail_genre_display_nm}, #{kmrb_id}, #{kmrb_title_nm}, #{kmrb_year},
            #{kmrb_domestic_release_date}, #{kmrb_country_of_origin}, #{kmrb_director}, #{kmrb_director_eng}, #{kmrb_actors_display}, #{kmrb_actors_display_eng},
            now(),
            #{stat},
            #{summary_long},
            #{summary_medium}
            )
            ON DUPLICATE KEY UPDATE
            purity_title=#{purity_title}, content_title=#{content_title}, eng_title=#{eng_title}, director=#{director}, year=#{year},
            actors_display=#{actors_display}, poster_url=#{poster_url}, country_of_origin=#{country_of_origin}, sad_ctgry_id=#{sad_ctgry_id}, sad_ctgry_nm=#{sad_ctgry_id},
            title_brief=#{title_brief}, domestic_release_date=#{domestic_release_date},
            kt_rating=#{kt_rating}, running_time=#{running_time}, detail_genre_display_cd=#{detail_genre_display_cd},
            kmrb_id=#{kmrb_id}, kmrb_title_nm=#{kmrb_title_nm}, kmrb_year=#{kmrb_year},
            kmrb_domestic_release_date=#{kmrb_domestic_release_date}, kmrb_country_of_origin=#{kmrb_country_of_origin}, kmrb_director=#{kmrb_director},
            kmrb_director_eng=#{kmrb_director_eng}, kmrb_actors_display=#{kmrb_actors_display}, kmrb_actors_display_eng=#{kmrb_actors_display_eng},
            regdate=now(),
            stat=#{stat},
            summary_long=#{summary_long},
            summary_medium=#{summary_medium}

    </insert>

    <insert id="insCcubeSeries" parameterType="com.kthcorp.cmts.model.CcubeSeries">
        /* insCcubeSeries */
        insert into ccube_series (
        SERIES_ID, SERIES_NM, PURITY_TITLE , ENG_TITLE, DIRECTOR, YEAR, ACTORS_DISPLAY, POSTER_URL, COUNTRY_OF_ORIGIN, SAD_CTGRY_ID, SAD_CTGRY_NM, KT_RATING, DETAIL_GENRE_DISPLAY_CD
        , DETAIL_GENRE_DISPLAY_NM, regdate, STAT,
            SUMMARY_LONG,
            SUMMARY_MEDIUM
        ) values (
        #{series_id}, #{series_nm}, #{purity_title}, #{eng_title}, #{director}, #{year}, #{actors_display}, #{poster_url}, #{country_of_origin}, #{sad_ctgry_id}, #{sad_ctgry_nm}
        , #{kt_rating}, #{detail_genre_display_cd}, #{detail_genre_display_nm}, now(), #{stat},
            #{summary_long},
            #{summary_medium}
        )
        ON DUPLICATE KEY UPDATE
        series_id = #{series_id}
        , series_nm = #{series_nm}
        , purity_title = #{purity_title}
        , eng_title = #{eng_title}
        , director = #{director}
        , year = #{year}
        , actors_display = #{actors_display}
        , poster_url = #{poster_url}
        , country_of_origin = #{country_of_origin}
        , sad_ctgry_id = #{sad_ctgry_id}
        , sad_ctgry_nm = #{sad_ctgry_nm}
        , kt_rating = #{kt_rating}
        , detail_genre_display_cd = #{detail_genre_display_cd}
        , detail_genre_display_nm = #{detail_genre_display_nm}
        , stat = #{stat}
        , regdate = now()
        , summary_long = #{summary_long}
        , summary_medium = #{summary_medium}
    </insert>

    <select id="getCcubeContentByYjid" resultType="com.kthcorp.cmts.model.CcubeContent">
        /* getCcubeContentByYjid */

        select a.yj_id as kmrb_id, a.regdate
        , a.content_id, a.purity_title
        from (
            select yj.yj_id
            #, substr(yo.regdate, 1,10) as regdate
            , yo.regdate
            , cc.content_id, cc.purity_title
            from yj_items yj
            inner join yj_items_out yo on yo.yj_id = yj.yj_id
            inner join ccube_contents cc on cc.kmrb_id = yj.yj_id  and cc.kmrb_id != ''
            #order by yo.regdate asc
        ) a order by date(a.regdate) asc
    </select>

    <select id="getCcubeContentByYjidNot" resultType="com.kthcorp.cmts.model.CcubeContent">
        /* getCcubeContentByYjidNot */

        select a.yj_id as kmrb_id, null as regdate
        , a.content_id, a.purity_title
        from (
            select yj.yj_id, null as regdate
            , cc.content_id, cc.purity_title
            from yj_items yj
            inner join ccube_contents cc on cc.kmrb_id = yj.yj_id
            where yj.yj_id not in ( select yj_id from yj_items_out )
        ) a
    </select>

    <select id="getCcubeOutputList50" resultType="map">
        /* getCcubeOutputList50 */
        select * from ccube_output
        where stat = 'Y'
        order by regdate asc, idx asc
        limit 50
    </select>

    <select id="getCcubeOutputListStandby" resultType="map" parameterType="com.kthcorp.cmts.model.Items">
        /* getCcubeOutputListStandby */
        select co.*, it.title, it.title2, it.director, it.year, it.cid, it.type
        <if test='type != null and type == "CcubeContent"'>
              , coo.CONTENT_ID as content_id
              , coo.MASTER_CONTENT_ID as master_content_id
        </if>
        <if test='type != null and type == "CcubeSeries"'>
              , coo.SERIES_ID as series_id
        </if>
        from ccube_output co
        inner join items it on it.idx = co.idx
        inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
        <if test='type != null and type == "CcubeContent"'>
            inner join ccube_keys ck on ck.itemidx = it.idx
            inner join ccube_contents_orig coo on coo.content_id = ck.content_id
            or (coo.CONTENT_TITLE = ck.purity_title and coo.YEAR = ck.year and coo.DIRECTOR = ck.director)
        </if>
        <if test='type != null and type == "CcubeSeries"'>
            inner join ccube_keys ck on ck.itemidx = it.idx
            inner join ccube_series_orig coo on coo.series_id = ck.series_id
        </if>
        where co.stat = 'Y' and it.type like concat(#{type}, '%')
        and co.uptcnt <![CDATA[ < ]]> 4
        order by co.regdate asc, co.idx asc
        limit ${pageSize} offset ${offsetIdx}
    </select>

    <select id="cntCcubeOutputListStandby" resultType="java.lang.Integer" parameterType="com.kthcorp.cmts.model.Items">
        /* cntCcubeOutputListStandby */
        select count(*) as cnt from ccube_output co
        inner join items it on it.idx = co.idx
        inner join items_stat iss on iss.idx = it.idx and iss.stat = 'ST'
        <if test='type != null and type == "CcubeContent"'>
            inner join ccube_keys ck on ck.itemidx = it.idx
            inner join ccube_contents_orig coo on coo.content_id = ck.content_id
            or (coo.CONTENT_TITLE = ck.purity_title and coo.YEAR = ck.year and coo.DIRECTOR = ck.director)
        </if>
        <if test='type != null and type == "CcubeSeries"'>
            inner join ccube_keys ck on ck.itemidx = it.idx
            inner join ccube_series_orig coo on coo.series_id = ck.series_id
        </if>
        where co.stat = 'Y' and it.type like concat(#{type}, '%')
        and co.uptcnt <![CDATA[ < ]]> 4
    </select>


    <select id="getCcubeOutputListSeriesAll" resultType="map">
        /* getCcubeOutputListSeriesAll */
        select co.*, it.idx, it.title, it.title2, it.director, it.year, it.cid, it.type
        from ccube_series co
        inner join items it on it.cid = co.series_id
        order by co.regdate asc, co.series_id asc
    </select>

    <select id="cntCcubeOutputListSeriesAll" resultType="java.lang.Integer" parameterType="com.kthcorp.cmts.model.Items">
        /* cntCcubeOutputListSeriesAll */
        select count(*) as cnt from ccube_series
    </select>

    <insert id="insCcubeOutput" parameterType="map">
        /* insCcubeOutput */
        insert into ccube_output (idx, stat, regdate, regid)
        values (#{idx}, 'Y', now(), #{regid})
    </insert>

    <update id="uptCcubeOutputStat" parameterType="map">
        /* uptCcubeOutputStat */
        update ccube_output set procdate = now()
          <if test='stat != null and stat != ""'>
              , stat = #{stat}
          </if>
          <if test='uptcnt != null and uptcnt > 0'>
              , uptcnt = #{uptcnt}
          </if>
        where hidx = #{hidx}
    </update>

    <insert id="insCcubeOutputHist" parameterType="map">
        /* insCcubeOutputHist */
        insert into ccube_output_hist (content, procdate, regid)
        values (#{content}, now(), #{regid})
    </insert>


    <insert id="insCcubeContentOrig" parameterType="com.kthcorp.cmts.model.CcubeContent">
        /* insCcubeContentOrig */
        insert into ccube_contents_orig (
            MASTER_CONTENT_ID, CONTENT_ID, PURITY_TITLE, CONTENT_TITLE, ENG_TITLE, DIRECTOR, YEAR,
            ACTORS_DISPLAY, POSTER_URL, COUNTRY_OF_ORIGIN, SAD_CTGRY_ID, SAD_CTGRY_NM, TITLE_BRIEF, DOMESTIC_RELEASE_DATE,
            KT_RATING, RUNNING_TIME, DETAIL_GENRE_DISPLAY_CD, DETAIL_GENRE_DISPLAY_NM, KMRB_ID, KMRB_TITLE_NM, KMRB_YEAR,
            KMRB_DOMESTIC_RELEASE_DATE, KMRB_COUNTRY_OF_ORIGIN, KMRB_DIRECTOR, KMRB_DIRECTOR_ENG, KMRB_ACTORS_DISPLAY, KMRB_ACTORS_DISPLAY_ENG,
            REGDATE,
            STAT,
            SUMMARY_LONG,
            SUMMARY_MEDIUM
            ) values (
            #{master_content_id}, #{content_id}, #{purity_title}, #{content_title}, #{eng_title}, #{director}, #{year},
            #{actors_display}, #{poster_url}, #{country_of_origin}, #{sad_ctgry_id}, #{sad_ctgry_nm}, #{title_brief}, #{domestic_release_date},
            #{kt_rating}, #{running_time}, #{detail_genre_display_cd}, #{detail_genre_display_nm}, #{kmrb_id}, #{kmrb_title_nm}, #{kmrb_year},
            #{kmrb_domestic_release_date}, #{kmrb_country_of_origin}, #{kmrb_director}, #{kmrb_director_eng}, #{kmrb_actors_display}, #{kmrb_actors_display_eng},
            now(),
            #{stat},
            #{summary_long},
            #{summary_medium}
            )

    </insert>

    <insert id="insCcubeContentOrigManual" parameterType="com.kthcorp.cmts.model.CcubeContent">
        /* insCcubeContentOrig */
        insert into ccube_contents_orig_1806 (
            MASTER_CONTENT_ID, CONTENT_ID, PURITY_TITLE, CONTENT_TITLE, ENG_TITLE, DIRECTOR, YEAR,
            ACTORS_DISPLAY, POSTER_URL, COUNTRY_OF_ORIGIN, SAD_CTGRY_ID, SAD_CTGRY_NM, TITLE_BRIEF, DOMESTIC_RELEASE_DATE,
            KT_RATING, RUNNING_TIME, DETAIL_GENRE_DISPLAY_CD, DETAIL_GENRE_DISPLAY_NM, KMRB_ID, KMRB_TITLE_NM, KMRB_YEAR,
            KMRB_DOMESTIC_RELEASE_DATE, KMRB_COUNTRY_OF_ORIGIN, KMRB_DIRECTOR, KMRB_DIRECTOR_ENG, KMRB_ACTORS_DISPLAY, KMRB_ACTORS_DISPLAY_ENG,
            REGDATE,
            STAT,
            SUMMARY_LONG,
            SUMMARY_MEDIUM
            ) values (
            #{master_content_id}, #{content_id}, #{purity_title}, #{content_title}, #{eng_title}, #{director}, #{year},
            #{actors_display}, #{poster_url}, #{country_of_origin}, #{sad_ctgry_id}, #{sad_ctgry_nm}, #{title_brief}, #{domestic_release_date},
            #{kt_rating}, #{running_time}, #{detail_genre_display_cd}, #{detail_genre_display_nm}, #{kmrb_id}, #{kmrb_title_nm}, #{kmrb_year},
            #{kmrb_domestic_release_date}, #{kmrb_country_of_origin}, #{kmrb_director}, #{kmrb_director_eng}, #{kmrb_actors_display}, #{kmrb_actors_display_eng},
            #{regdate},
            #{stat},
            #{summary_long},
            #{summary_medium}
            )

    </insert>

    <insert id="insCcubeSeriesOrig" parameterType="com.kthcorp.cmts.model.CcubeSeries">
        /* insCcubeSeriesOrig */
        insert into ccube_series_orig (
        SERIES_ID, SERIES_NM, PURITY_TITLE , ENG_TITLE, DIRECTOR, YEAR, ACTORS_DISPLAY, POSTER_URL, COUNTRY_OF_ORIGIN, SAD_CTGRY_ID, SAD_CTGRY_NM, KT_RATING, DETAIL_GENRE_DISPLAY_CD
        , DETAIL_GENRE_DISPLAY_NM,
        regdate,
        STAT,
        SUMMARY_LONG,
        SUMMARY_MEDIUM
        ) values (
        #{series_id}, #{series_nm}, #{purity_title}, #{eng_title}, #{director}, #{year}, #{actors_display}, #{poster_url}, #{country_of_origin}, #{sad_ctgry_id}, #{sad_ctgry_nm}
        , #{kt_rating}, #{detail_genre_display_cd}, #{detail_genre_display_nm},
        now(),
        #{stat},
        #{summary_long},
        #{summary_medium}
        )
    </insert>

    <insert id="insCcubeSeriesOrigManual" parameterType="com.kthcorp.cmts.model.CcubeSeries">
        /* insCcubeSeriesOrig */
        insert into ccube_series_orig_1806 (
        SERIES_ID, SERIES_NM, PURITY_TITLE , ENG_TITLE, DIRECTOR, YEAR, ACTORS_DISPLAY, POSTER_URL, COUNTRY_OF_ORIGIN, SAD_CTGRY_ID, SAD_CTGRY_NM, KT_RATING, DETAIL_GENRE_DISPLAY_CD
        , DETAIL_GENRE_DISPLAY_NM,
        regdate,
        STAT,
        SUMMARY_LONG,
        SUMMARY_MEDIUM
        ) values (
        #{series_id}, #{series_nm}, #{purity_title}, #{eng_title}, #{director}, #{year}, #{actors_display}, #{poster_url}, #{country_of_origin}, #{sad_ctgry_id}, #{sad_ctgry_nm}
        , #{kt_rating}, #{detail_genre_display_cd}, #{detail_genre_display_nm},
        #{regdate},
        #{stat},
        #{summary_long},
        #{summary_medium}
        )
    </insert>

    <select id="cntCcubeKeysByCidOrSid" resultType="java.lang.Integer" parameterType="com.kthcorp.cmts.model.CcubeKeys">
        /* cntCcubeKeysByCidOrSid */
        select count(*) as cnt
        from ccube_keys
        where 1 = 1
        <if test='content_id != null and content_id > 0'>
            and content_id = #{content_id}
        </if>
        <if test='series_id != null and series_id > 0'>
            and series_id = #{series_id}
        </if>

    </select>


    <select id="getSummaryFromCcube" resultType="java.lang.String"
            parameterType="java.lang.Integer">
      /* getSummaryFromCcube */
        select
            case when (substr(a.type,1,8)) = 'CcubeSer'
            then ( select summary_long from ccube_series where series_id = a.cid limit 1 )
            else ( select summary_long from ccube_contents where content_id = a.cid limit 1 )
            end as summary_long
            from items a
            where a.idx = #{itemidx}
    </select>

    <select id="getMultipleItemsByMCID"  resultType="java.util.Map" >
        /* getMultipleItemsByMCID */

        /** 중복 대상 master_content_id 전체 조회, 승인된 itemidx 1개 이상인 경우 **/
        /** 최종 승인건만남기고 비노출 처리 items.stat = M , items_stat.stat = MG */
        select * from (
        select b.master_content_id, sum(b.cnt) as cnt from (
            select a.master_content_id, a.content_id, count(*) cnt  from (
            select cc.master_content_id, cc.content_id
            from ccube_contents cc
            inner join items it on it.cid = cc.content_id and it.stat = 'Y'
            inner join items_stat iss on iss.idx = it.idx and iss.stat in ('ST','RT')
            ) a
            group by a.master_content_id, a.content_id
        ) b
        group by b.master_content_id
        ) c
        where c.cnt > 1
    </select>

    <select id="getSortedItemsByMCID"  resultType="java.util.Map" parameterType="java.lang.String">
        /* getSortedItemsByMCID */

        /** 중복대상 master_content_id 로 최종 승인 차수의 itemidx 리스트 취득 */
        /** 최종 승인건만남기고 비노출 처리 items.stat = M **/
        select it.idx, cc.master_content_id, cc.content_id,iss.stat, iss.regdate from ccube_contents cc
        inner join items it on it.cid = cc.content_id and it.stat = 'Y'
        left outer join items_stat iss on iss.idx = it.idx and iss.stat in ('ST','RT')
        where cc.master_content_id = #{master_content_id}
        order by iss.stat desc, iss.regdate desc, it.idx desc
    </select>

    <update id="chgItemsForDisableDup" parameterType="java.lang.Long">
        /* chgItemsForDisableDup */

        /** items_stat.stat=MG,  items.stat=M 으로 변경 **/
        update items set stat ='M' where idx = #{idx}
    </update>
    <update id="chgItemsStatForDisableDup" parameterType="java.lang.Long">
        /* chgItemsStatForDisableDup */

        /** items_stat.stat=MG,  items.stat=M 으로 변경 **/
        update items_stat set stat ='MG' where idx = #{idx}
    </update>

    <select id="getSortedMCIDforNew" resultType="java.util.Map" parameterType="java.lang.String">
        /* getSortedMCIDforNew */

        /** 중복대상 master_content_id 로 ccube_contents 입수 순서로 itemidx 리스트 취득 */
        /** 일괄 처리 시에는 승인완료 건이 없을 경우 **/
        /** 신규 입수 건이 있을 경우에는 해당건만 남기고 비노출 처리 items.stat = M **/
        select it.idx, cc.master_content_id, cc.content_id,iss.stat, it.regdate1 from ccube_contents cc
        inner join items it on it.cid = cc.content_id and it.stat = 'Y'
        inner join items_stat iss on iss.idx = it.idx and iss.stat in ('ST','RT')
        where cc.master_content_id = #{master_content_id}
        order by it.regdate1 asc, it.idx asc
    </select>


    <update id="chgItemsStatForRT" parameterType="java.lang.Long">
        /* chgItemsStatForRT */

        update items_stat set stat ='RT' where idx = #{idx}
    </update>
</mapper>